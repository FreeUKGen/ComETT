name: List All Open Issues

on:
  workflow_dispatch:
    inputs:
      target_iteration:
        description: 'Target iteration title'
        required: true

jobs:
  list-open-issues:
    runs-on: ubuntu-latest
    steps:
      - name: List and move open issues
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PROJECT_PAT }}
          script: |
            try {
              const projectId = 'PVT_kwDOABiKgc4AxB-J'

              // Get project fields to find iteration field ID
              const projectFields = await github.graphql(`
                query {
                  node(id: "${projectId}") {
                    ... on ProjectV2 {
                      fields(first: 20) {
                        nodes {
                          ... on ProjectV2IterationField {
                            id
                            name
                            configuration {
                              iterations {
                                id
                                title
                                startDate
                                duration
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `);

              // Find the iteration field
              const iterationField = projectFields.node.fields.nodes.find(field => field.name === 'Sprint');
              if (!iterationField) {
                throw new Error('Sprint field not found in project. Please ensure there is a field named "Sprint" in your project.');
              }

              // Get all available iterations
              const iterations = iterationField.configuration.iterations;
              console.log('Available iterations:');
              iterations.forEach(iter => {
                console.log(`- ${iter.title}`);
              });
              
              // Find target iteration
              const targetIteration = iterations.find(
                iter => iter.title === '${{ github.event.inputs.target_iteration }}'
              );

              if (!targetIteration) {
                throw new Error(`Target iteration "${{ github.event.inputs.target_iteration }}" not found. Available iterations are listed above.`);
              }

              // Get all items in the project
              const projectItems = await github.graphql(`
                query {
                  node(id: "${projectId}") {
                    ... on ProjectV2 {
                      items(first: 100) {
                        nodes {
                          id
                          fieldValues(first: 20) {
                            nodes {
                              ... on ProjectV2ItemFieldIterationValue {
                                iterationId
                                field {
                                  ... on ProjectV2IterationField {
                                    id
                                  }
                                }
                              }
                            }
                          }
                          content {
                            ... on Issue {
                              id
                              number
                              title
                              state
                              repository {
                                name
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `);

              // Find all open issues and group them by iteration
              const openIssuesByIteration = {};
              iterations.forEach(iter => {
                openIssuesByIteration[iter.title] = [];
              });

              projectItems.node.items.nodes.forEach(item => {
                if (!item.content || item.content.state !== 'OPEN') return;
                
                const iterationValue = item.fieldValues.nodes.find(fieldValue => 
                  fieldValue.field.id === iterationField.id
                );
                
                const iterationTitle = iterationValue ? 
                  iterations.find(iter => iter.id === iterationValue.iterationId)?.title : 
                  'No Iteration';
                
                if (!openIssuesByIteration[iterationTitle]) {
                  openIssuesByIteration[iterationTitle] = [];
                }
                
                openIssuesByIteration[iterationTitle].push({
                  number: item.content.number,
                  title: item.content.title,
                  repository: item.content.repository.name,
                  id: item.id
                });
              });

              // Print summary of open issues by iteration
              console.log('\nOpen Issues Summary:');
              Object.entries(openIssuesByIteration).forEach(([iteration, issues]) => {
                console.log(`\n${iteration} (${issues.length} issues):`);
                issues.forEach(issue => {
                  console.log(`- #${issue.number} (${issue.repository}): ${issue.title}`);
                });
              });

              // Ask for confirmation before moving issues
              const totalOpenIssues = Object.values(openIssuesByIteration).reduce((sum, issues) => sum + issues.length, 0);
              console.log(`\nTotal open issues found: ${totalOpenIssues}`);

              // Move all open issues to target iteration
              for (const [iteration, issues] of Object.entries(openIssuesByIteration)) {
                if (iteration === targetIteration.title) continue; // Skip issues already in target iteration
                
                for (const issue of issues) {
                  try {
                    await github.graphql(`
                      mutation {
                        updateProjectV2ItemFieldValue(input: {
                          projectId: "${projectId}"
                          itemId: "${issue.id}"
                          fieldId: "${iterationField.id}"
                          value: { 
                            iterationId: "${targetIteration.id}"
                          }
                        }) {
                          projectV2Item {
                            id
                          }
                        }
                      }
                    `);

                    console.log(`Moved issue #${issue.number} (${issue.repository}): ${issue.title} from ${iteration} to ${targetIteration.title}`);
                  } catch (moveError) {
                    console.error(`Failed to move issue #${issue.number}: ${moveError.message}`);
                    // Continue with next issue even if one fails
                  }
                }
              }

              console.log(`Successfully moved all open issues to ${targetIteration.title}`);
            } catch (error) {
              console.error('Error:', error.message);
              if (error.message.includes('Bad credentials')) {
                console.error('This usually means:');
                console.error('1. The PROJECT_PAT secret is not set in repository secrets');
                console.error('2. The token does not have sufficient permissions (needs repo and project scopes)');
                console.error('3. The token has expired');
                console.error('Please check your repository secrets and token permissions.');
              } else if (error.message.includes('Could not resolve to a node')) {
                console.error('This usually means:');
                console.error('1. The project ID is incorrect');
                console.error('2. The project does not exist');
                console.error('3. The token does not have access to the project');
              }
              throw error;
            }
