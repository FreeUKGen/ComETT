name: Move Last Sprint Issues to Current Sprint

on:
  schedule:
    # Run at the start of each sprint (assuming 2-week sprints)
    - cron: '0 0 * * 1'  # Every Monday at midnight UTC
  workflow_dispatch:  # Allow manual triggering

jobs:
  move-sprint-issues:
    runs-on: ubuntu-latest
    steps:
      - name: Move issues to current sprint
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PROJECT_PAT }}
          script: |
             const projectId = 'PVT_kwDOABiKgc4AxB-J'

             // Get project fields to find iteration field ID
              const projectFields = await github.graphql(`
                query {
                  node(id: "${projectId}") {
                    ... on ProjectV2 {
                      fields(first: 20) {
                        nodes {
                          ... on ProjectV2IterationField {
                            id
                            name
                            configuration {
                              iterations {
                                id
                                title
                                startDate
                                duration
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `);
            
           

  
              // Find the iteration field
              const iterationField = projectFields.node.fields.nodes.find(field => field.name === 'Sprint');
              if (!iterationField) {
                throw new Error('Iteration field not found in project');
              }
              
              // Find source and target iterations
              const sourceIteration = iterationField.configuration.iterations.find(
                iter => iter.title === '${{ github.event.inputs.source_iteration }}'
              );
              const targetIteration = iterationField.configuration.iterations.find(
                iter => iter.title === '${{ github.event.inputs.target_iteration }}'
              );

              if (!sourceIteration) {
                throw new Error(`Source iteration "${{ github.event.inputs.source_iteration }}" not found`);
              }
              if (!targetIteration) {
                throw new Error(`Target iteration "${{ github.event.inputs.target_iteration }}" not found`);
              }

              console.log(`Moving issues from "${sourceIteration.title}" to "${targetIteration.title}"`);

              // Get all items in the project
              const projectItems = await github.graphql(`
                query {
                  node(id: "${projectId}") {
                    ... on ProjectV2 {
                      items(first: 100) {
                        nodes {
                          id
                          fieldValues(first: 20) {
                            nodes {
                              ... on ProjectV2ItemFieldIterationValue {
                                iterationId
                                field {
                                  ... on ProjectV2IterationField {
                                    id
                                  }
                                }
                              }
                            }
                          }
                          content {
                            ... on Issue {
                              id
                              number
                              title
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `);

              // Find issues in source iteration
              const sourceIssues = projectItems.node.items.nodes.filter(item => {
                if (!item.content) return false;
                return item.fieldValues.nodes.some(fieldValue => 
                  fieldValue.iterationId === sourceIteration.id
                );
              });

              console.log(`Found ${sourceIssues.length} issues in source iteration`);

              // Move each issue to target iteration
              for (const issue of sourceIssues) {
                await github.graphql(`
                  mutation {
                    updateProjectV2ItemFieldValue(input: {
                      projectId: "${projectId}"
                      itemId: "${issue.id}"
                      fieldId: "${iterationField.id}"
                      value: { 
                        iterationId: "${targetIteration.id}"
                      }
                    }) {
                      projectV2Item {
                        id
                      }
                    }
                  }
                `);

                console.log(`Moved issue #${issue.content.number} (${issue.content.title}) to ${targetIteration.title}`);
              }

              console.log(`Successfully moved ${sourceIssues.length} issues from "${sourceIteration.title}" to "${targetIteration.title}"`);
              } catch (error) {
              console.error('Error:', error.message);
              if (error.message.includes('Bad credentials')) {
                console.error('This usually means:');
                console.error('1. The PROJECT_TOKEN secret is not set in repository secrets');
                console.error('2. The token does not have sufficient permissions (needs repo and project scopes)');
                console.error('3. The token has expired');
                console.error('Please check your repository secrets and token permissions.');
              }
              throw error;
              }
