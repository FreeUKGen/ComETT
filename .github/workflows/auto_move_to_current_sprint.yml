name: Move Issues Between Iterations

on:
  workflow_dispatch:
    inputs:
      source_iteration:
        description: 'Source iteration title (e.g., "Sprint 1")'
        required: true
      target_iteration:
        description: 'Target iteration title (e.g., "Sprint 2")'
        required: true

jobs:
  move-iteration-issues:
    runs-on: ubuntu-latest
    steps:
      - name: Move issues between iterations
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PROJECT_PAT }}
          script: |
            try {
              const projectId = 'PVT_kwDOABiKgc4AxB-J'

              // Get project fields to find iteration field ID
              const projectFields = await github.graphql(`
                query {
                  node(id: "${projectId}") {
                    ... on ProjectV2 {
                      fields(first: 20) {
                        nodes {
                          ... on ProjectV2IterationField {
                            id
                            name
                            configuration {
                              iterations {
                                id
                                title
                                startDate
                                duration
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `);

              // Find the iteration field
              const iterationField = projectFields.node.fields.nodes.find(field => field.name === 'Sprint');
              if (!iterationField) {
                throw new Error('Sprint field not found in project. Please ensure there is a field named "Sprint" in your project.');
              }

              // Get all available iterations
              const iterations = iterationField.configuration.iterations;
              console.log('Available iterations:');
              iterations.forEach(iter => {
                console.log(`- ${iter.title} ${iter.id}`);
              });
              
              // Find source and target iterations
              const sourceIteration = iterations.find(
                iter => iter.title === '${{ github.event.inputs.source_iteration }}'
              );
              const targetIteration = iterations.find(
                iter => iter.title === '${{ github.event.inputs.target_iteration }}'
              );

              if (!sourceIteration) {
                throw new Error(`Source iteration "${{ github.event.inputs.source_iteration }}" not found. Available iterations are listed above.`);
              }
              if (!targetIteration) {
                throw new Error(`Target iteration "${{ github.event.inputs.target_iteration }}" not found. Available iterations are listed above.`);
              }

              console.log(`Moving issues from "${sourceIteration.title}" to "${targetIteration.title}"`);

              // Get all items in the project
              const projectItems = await github.graphql(`
                query {
                  node(id: "${projectId}") {
                    ... on ProjectV2 {
                      items(first: 100) {
                        nodes {
                          id
                          fieldValues(first: 20) {
                            nodes {
                              ... on ProjectV2ItemFieldIterationValue {
                                iterationId
                                field {
                                  ... on ProjectV2IterationField {
                                    id
                                  }
                                }
                              }
                            }
                          }
                          content {
                            ... on Issue {
                              id
                              number
                              title
                              state
                              repository {
                                name
                              }
                              labels(first: 10) {
                                nodes {
                                  name
                                }
                              }
                              assignees(first: 5) {
                                nodes {
                                  login
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `);

              // Find open issues in source iteration
              const sourceIssues = projectItems.node.items.nodes.filter(item => {
                if (!item.content) return false;
                
                const iterationValue = item.fieldValues.nodes.find(fieldValue => 
                  fieldValue && 
                  fieldValue.field && 
                  fieldValue.field.id === iterationField.id
                );
                
                return item.content.state === 'OPEN' && 
                       iterationValue && 
                       iterationValue.iterationId === sourceIteration.id;
              });

              console.log(`${sourceIteration.id}`);

              // Log all issues and their iterations
              # console.log('\n=== All Project Issues ===');
              # projectItems.node.items.nodes.forEach(item => {
              #   if (!item.content) return;
                
              #   const iterationValue = item.fieldValues.nodes.find(fieldValue => 
              #     fieldValue && 
              #     fieldValue.field && 
              #     fieldValue.field.id === iterationField.id
              #   );
                
              #   const iterationTitle = iterationValue && iterationValue.iterationId ? 
              #     iterations.find(iter => iter.id === iterationValue.iterationId)?.title : 
              #     'No Iteration';
                
              #   console.log(`\nIssue #${item.content.number}: ${item.content.title}`);
              #   console.log(`  Repository: ${item.content.repository.name}`);
              #   console.log(`  State: ${item.content.state}`);
              #   console.log(`  Iteration: ${iterationTitle}`);
                
              #   if (item.content.labels && item.content.labels.nodes.length > 0) {
              #     console.log(`  Labels: ${item.content.labels.nodes.map(label => label.name).join(', ')}`);
              #   }
                
              #   if (item.content.assignees && item.content.assignees.nodes.length > 0) {
              #     console.log(`  Assignees: ${item.content.assignees.nodes.map(assignee => assignee.login).join(', ')}`);
              #   }
              # });

              # if (sourceIssues.length === 0) {
              #   console.log(`No issues found in source iteration "${sourceIteration.title}"`);
              #   return;
              # }

              # console.log(`Found ${sourceIssues.length} issues in source iteration`);

              // Move each issue to target iteration
              for (const issue of sourceIssues) {
                try {
                  await github.graphql(`
                    mutation {
                      updateProjectV2ItemFieldValue(input: {
                        projectId: "${projectId}"
                        itemId: "${issue.id}"
                        fieldId: "${iterationField.id}"
                        value: { 
                          iterationId: "${targetIteration.id}"
                        }
                      }) {
                        projectV2Item {
                          id
                        }
                      }
                    }
                  `);

                  console.log(`Moved open issue #${issue.content.number} (${issue.content.title}) to ${targetIteration.title}`);
                } catch (moveError) {
                  console.error(`Failed to move issue #${issue.content.number}: ${moveError.message}`);
                  // Continue with next issue even if one fails
                }
              }

              console.log(`Successfully moved ${sourceIssues.length} issues from "${sourceIteration.title}" to "${targetIteration.title}"`);
            } catch (error) {
              console.error('Error:', error.message);
              if (error.message.includes('Bad credentials')) {
                console.error('This usually means:');
                console.error('1. The PROJECT_PAT secret is not set in repository secrets');
                console.error('2. The token does not have sufficient permissions (needs repo and project scopes)');
                console.error('3. The token has expired');
                console.error('Please check your repository secrets and token permissions.');
              } else if (error.message.includes('Could not resolve to a node')) {
                console.error('This usually means:');
                console.error('1. The project ID is incorrect');
                console.error('2. The project does not exist');
                console.error('3. The token does not have access to the project');
              }
              throw error;
            }
